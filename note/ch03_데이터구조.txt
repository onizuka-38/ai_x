1절. 리스트 : [타입과 관련없는 0개 이상의 데이터들]
	len(lst) : 데이터(요소) 갯수
	min(lst), max(lst), sum(lst), sorted(lst, reverse=True) : 최소, 최대, 합, 정렬
	data in lst : lst안에 data 요소가 있는지 여부
	lst[idx], lst[from:stop:step] 인덱싱과 슬라이싱
	추가 : lst.append(value), lst.insert(idx, value)
	삭제 : lst.pop(), lst.pop(idx), lst.remove(data)
	찾기 : lst.index(data), lst.count(data)
	정렬 : lst.sort(reverse=True)
	역순 : lst.reverse()

1.3 요소 추가
	+ : 두 리스트 연결
	* : 리스트를 곱한 수 만큼 반복
	append() : 리스트 맨 뒤에 요소 추가
	extend() : 맨 뒤에 리스트를 요소별로 추가
	insert(idx, 값) : idx번째 인덱스 위치에 추가(기존 데이터는 shift)

1.4 인덱싱과 요소 갯수
	- 변수[index] : 인덱스를 이용한 접근
	- index(찾을데이터) : 해당 찾을 데이터가 있는 요소의 index를 반환
                    		 찾을 데이터가 없을 경우 오류
	- count(찾을데이터) : 리스트에서 찾을데이터의 갯수를 반환

1.5 원하는 요소 추출
	1. 리스트 슬라이싱 : 리스트에서 원하는 index의 데이터를 추출(인덱스 범위 벗어나도 에러 안남)
   	- [from:stop:step] from 부터 stop앞까지 step씩 증가하는 index의 값을 추출
   	- from 생략시 처음을, stop 생략시 끝, step 생략시 1을 의미. 모두 생략 가능
   	- 음수 인덱스 가능

	2. 리스트 컴프리헨션 : 리스트에서 원하는 데이터를 추출
	# ex3. 3이상의 요소들의 제곱을 추출
	L = [1, 2, 3, 4, 5]
	[ data**2 for data in L if data >= 3]

1.7 요소 삭제
	- pop() : 가장 마지막 index 요소가 반환되고 삭제
	- pop(idx) : idx 번째 요소가 반환되고 삭제
	- remove(지울data) : 리스트안의 data가 삭제
	- del 변수[idx] : idx 번째 요소가 삭제

2절. 튜플
	tup = (data, ) 수정 불가
	len(tup) : 요소 갯수
	min(tup), max(tup), sum(tup), sorted(tup, reverse=True) : 최소, 최대, 합, 정렬
	data in tup : tup안에 data 요소가 있는지 여부
	tup[idx], tup[from:stop:step] 인덱싱과 슬라이싱
	찾기 : tup.index(data), tup.count(data)

3절. 딕셔너리
	dic = {key1:value1, key2:value2, ...}
	읽기 : dic[key1],	dic.get(key1) 
	수정 : dic[key1] = 수정할 데이터
	제거 : del dic[key1] , dic.pip(key1)
	추가 : dic[key9] = value9
	dic.keys() / dic.values() / dic.items()

4절. 셋 s = {data1, data2, data1} => {data1, data2} 중복허용안함, 순서없음(인덱스 없음)
	추가 : add(스칼라데이터), update(데이터구조)
	삭제 : remove(삭제할 데이터)
	연산 : & | -
데이터구조를 for문을 이용하여 출력할 경우 enumerate를 사용

5절. enumerate
	- 반복자 또는 순서 객체로 반복문을 처리할 때 사용함수
	- 리스트, 튜플, 셋, 딕셔너리를 for문에 사용시